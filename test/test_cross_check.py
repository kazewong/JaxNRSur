import numpy as np
import pytest
from scipy.interpolate import interp1d

import jax
from jaxnrsur.NRSur7dq4 import NRSur7dq4Model

# Path to test data generated by gen_test_data.py
TEST_DATA_PATH = "test/test_data.npz"

jax.config.update("jax_enable_x64", True)


@pytest.fixture(scope="module")
def test_data():
    data = np.load(TEST_DATA_PATH)
    return {
        "t": data["t"],
        "h": data["h"],
        "dyn": data["dyn"],
        "params": data["params"],
        "incl": data["incl"].item(),
        "phiref": data["phiref"].item(),
    }


@pytest.fixture(scope="module")
def jax_model():
    return NRSur7dq4Model()


def test_waveform_agreement(test_data, jax_model):
    # Reference waveform loaded from file
    t_ref = test_data["t"]
    h_ref = test_data["h"]  # shape: (2, N) or (N, 2) depending on convention
    theta_ref = test_data["incl"]
    phi_ref = test_data["phiref"]

    # Prepare inputs for JAX model
    params = test_data["params"]
    # The model expects time and params
    # If h_ref shape is (2, N): h_ref[0] = hp, h_ref[1] = hc
    # If h_ref shape is (N, 2): h_ref[:, 0] = hp, h_ref[:, 1] = hc
    # We'll handle both cases below

    print(params)

    # Call the JAX model

    for i in range(len(params)):
        # Select parameters for this sample

        sample_params = params[i]

        inertial_h, Omega_interp = jax_model.get_waveform_geometric(
            t_ref[i],
            sample_params,
            theta=theta_ref[i],
            phi=phi_ref[i],
        )

        interp_ans = interp1d(
            t_ref[i], h_ref[i], bounds_error=False, fill_value=0, kind="cubic"
        )(jax_model.data.t_coorb)

        print(
            f"Sample {i}: Max abs difference in hp:",
            np.max(np.abs(interp_ans - inertial_h)),
        )
